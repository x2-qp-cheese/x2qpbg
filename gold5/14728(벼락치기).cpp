#include <bits/stdc++.h>
using namespace std;

// dp[i][j] - j시간을 사용했을 때, 1번부터 i번 단원까지 공부한 후 얻을 수 있는 최대 점수
int dp[101][10001]; 
int k[101]; // 각 단원별 예상 공부시간
int s[101]; // 각 단원의 배점

int main(){
    int n; // 이번 시험의 단원 개수
    int t; // 시험까지 공부할 수 있는 총 시간
    
    cin >> n >> t; // 단원 수 n과 시험까지 공부할 수 있는 총 시간 t 입력

    // dp 배열을 0으로 초기화
    memset(dp, 0, sizeof(dp));
    
    // 각 단원의 공부시간과 배점 입력
    for(int i = 1; i <= n; i++){
        cin >> k[i] >> s[i];
    }

    // dp 배열을 채우는 과정
    // dp[i][j]: 1부터 i번 단원까지 공부하고 j시간을 사용할 때 얻을 수 있는 최대 점수
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= t; j++){
            // 현재 시간 j가 i번 단원의 공부시간 k[i]보다 크거나 같으면
            if(j >= k[i]){
                // 현재 단원을 포함했을 경우와 포함하지 않았을 경우의 최대 값을 구함
                dp[i][j] = max(dp[i][j], dp[i-1][j-k[i]] + s[i]);
            }
            // 단원을 포함하지 않으면 이전 값이 그대로 유지되므로 이를 반영
            dp[i][j] = max(dp[i][j], dp[i-1][j]);
        }
    }

    // 시험까지 공부할 수 있는 최대 시간 t를 고려한 최대 점수 출력
    cout << dp[n][t];
}
