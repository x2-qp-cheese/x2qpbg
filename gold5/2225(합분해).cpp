#include <bits/stdc++.h>
using namespace std;

long long dp[201][201];  // dp[i][j]는 i개의 수로 j를 만드는 경우의 수

int main(){
    int n;  // 합의 목표 값
    int k;  // 더할 수 있는 수의 개수
    cin >> n >> k;  // n과 k 입력받기

    // 초기 조건: 1개로 0을 만드는 경우는 1가지 (빈 집합)
    for(int i = 1; i <= k; i++){
        dp[i][0] = 1;  // 0을 만드는 방법은 항상 1가지
    }

    // 1개로 1부터 n까지의 값을 만드는 경우의 수는 모두 1 (각각 하나의 방법으로만 만들 수 있음)
    for(int j = 1; j <= n; j++){
        dp[1][j] = 1;  // 1개로 모든 숫자는 1가지 방법으로 만들 수 있음
    }

    // DP 계산
    for(int i = 2; i <= k; i++){  // i는 사용할 수 있는 수의 개수
        for(int j = 1; j <= n; j++){  // j는 만들고자 하는 합
            // dp[i][j]는 이전의 두 가지 경우의 합으로 계산:
            // - i-1개의 수로 j를 만들고
            // - i개의 수로 j-1을 만들고
            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % 1000000000;
        }
    }

    // 결과 출력: k개의 수로 n을 만드는 방법의 수
    cout << dp[k][n];
}
